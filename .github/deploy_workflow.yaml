name: Deploy App to Cloudhub
on:
  workflow_call:
    inputs:
      CLOUDHUB_ENVIRONMENT:
        required: true
        type: string
      GITHUB_ENVIRONMENT:
        required: true
        type: string
      CLOUDHUB_REPLICAS:
        required: true
        type: string
      CLOUDHUB_REPLICA_SIZE:
        required: true
        type: string
      CLOUDHUB_PRIVATE_SPACE:
        required: true
        type: string
      GENERATE_PUBLIC_URL_FLAG:
        required: false
        type: string
        default: false
      CLUSTER_ENABLED_FLAG:
        required: false
        type: string
        default: false
      CLOUDHUB_PUBLIC_URL:
        required: false
        type: string
      APP_LAYER:
        required: true
        type: string
      MULE_LOG_S3_FREQUENCY_MIN:
        required: false
        type: string
      MULE_LOG_S3_AWS_REGION:
        required: false
        type: string
      MULE_LOG_S3_AWS_BUCKET:
        required: false
        type: string
      MULE_LOG_S3_COMPRESS_FLAG:
        required: false
        type: string
      MULE_LOG_S3_STORAGE_CLASS:
        required: false
        type: string
    secrets:
      EX_CONNECTED_APP_ID:
        required: true
      EX_CONNECTED_APP_SECRET:
        required: true
      CH_CONNECTED_APP_ID:
        required: true
      CH_CONNECTED_APP_SECRET:
        required: true
      SECURE_ENCRYPT_KEY:
        required: true
      MULE_AP_CLIENT_ID:
        required: true
      MULE_AP_CLIENT_SECRET:
        required: true
      TITAN_BIZ_GROUP:
        required: true
      MULE_AWS_S3_ACCESS_KEY:
        required: false
      MULE_AWS_S3_SECRET_KEY:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.GITHUB_ENVIRONMENT }}
    env:
      APP_NAME: ${{ github.event.repository.name }}-${{ vars.APPLICATION_ENV }}
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "$GITHUB_CONTEXT"

    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.ref}}

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'
        # restore-keys: | ${{ runner.os }}-maven-

    - name: Setup Maven Action
      uses: s4u/setup-maven-action@v1.2.1
      with:
        java-version: '11'
        maven-version: '3.8.7'

    - name: Create Custom settings xml
      uses: whelk-io/maven-settings-xml-action@v20
      with:
        servers: >
          [
            {
               "id"       : "cloudhubConnectedApp",
               "username" : "~~~Client~~~",
               "password" : "${{ secrets.CH_CONNECTED_APP_ID }}~?~${{ secrets.CH_CONNECTED_APP_SECRET }}"
            },
            {
               "id"       : "anypoint-exchange-v3",
               "username" : "~~~Client~~~",
               "password" : "${{ secrets.EX_CONNECTED_APP_ID }}~?~${{ secrets.EX_CONNECTED_APP_SECRET }}"
            }
          ]
        output_file: .m2/settings.xml

    - name: Check Environment and Frame Deployment Name
      if: ${{ inputs.GITHUB_ENVIRONMENT == 'PROD'}}
      run: echo "APP_NAME=${{github.event.repository.name}}" >> $GITHUB_ENV #Override APP name in case of PROD deployment

    - name: Checking Cache
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Deploy for ${{ github.event.ref }} branch - INTERNAL
      if: ${{ inputs.CLOUDHUB_PUBLIC_URL == '' }}
      run: |
        mvn clean deploy -B -s .m2/settings.xml -DskipTests -DmuleDeploy \
        -Denv=${{ vars.APPLICATION_ENV }} \
        -Dsecure.key.titan=${{ secrets.SECURE_ENCRYPT_KEY }} \
        -Dap.client_id=${{ secrets.MULE_AP_CLIENT_ID }} \
        -Dap.client_secret=${{ secrets.MULE_AP_CLIENT_SECRET }} \
        -Dencrypt.key=${{ secrets.SECURE_ENCRYPT_KEY }} \
        -Ddeployment.env=${{ vars.APPLICATION_ENV }} \
        -Dap.environment=${{ inputs.GITHUB_ENVIRONMENT }} \
        -Ddeployment.name=${{ env.APP_NAME }} \
        -Dch.space=${{ inputs.CLOUDHUB_PRIVATE_SPACE }} \
        -Dch.replicas=${{ inputs.CLOUDHUB_REPLICAS }} \
        -Dch.vCores=${{ inputs.CLOUDHUB_REPLICA_SIZE }} \
        -Dap.businessGroup=${{ secrets.TITAN_BIZ_GROUP }} \
        -Dapi.layer=${{ inputs.APP_LAYER }} \
        -Dap.generateDefaultPublicUrl=${{ inputs.GENERATE_PUBLIC_URL_FLAG }} \
        -Dap.clusteredFlag=${{ inputs.CLUSTER_ENABLED_FLAG }} \
        -Dlog.s3.frequency=${{ inputs.MULE_LOG_S3_FREQUENCY_MIN }} \
        -Dlog.s3.aws.region=${{ inputs.MULE_LOG_S3_AWS_REGION }} \
        -Dlog.s3.bucket=${{ inputs.MULE_LOG_S3_AWS_BUCKET }} \
        -Dlog.s3.compress=${{ inputs.MULE_LOG_S3_COMPRESS_FLAG }} \
        -Dlog.s3.storageClass=${{ inputs.MULE_LOG_S3_STORAGE_CLASS }} \
        -Dlog.s3.aws.accessKey=${{ secrets.MULE_AWS_S3_ACCESS_KEY }} \
        -Dlog.s3.aws.secureKey=${{ secrets.MULE_AWS_S3_SECRET_KEY }} \

    - name: Deploy for ${{ github.event.ref }} branch - PUBLIC
      if: ${{ inputs.CLOUDHUB_PUBLIC_URL != '' }}
      run: |
        mvn clean deploy -B -s .m2/settings.xml -DskipTests -DmuleDeploy \
        -Denv=${{ vars.APPLICATION_ENV }} \
        -Dsecure.key.titan=${{ secrets.SECURE_ENCRYPT_KEY }} \
        -Dap.client_id=${{ secrets.MULE_AP_CLIENT_ID }} \
        -Dap.client_secret=${{ secrets.MULE_AP_CLIENT_SECRET }} \
        -Dencrypt.key=${{ secrets.SECURE_ENCRYPT_KEY }} \
        -Ddeployment.env=${{ vars.APPLICATION_ENV }} \
        -Dap.environment=${{ inputs.GITHUB_ENVIRONMENT }} \
        -Ddeployment.name=${{ env.APP_NAME }} \
        -Dch.space=${{ inputs.CLOUDHUB_PRIVATE_SPACE }} \
        -Dch.replicas=${{ inputs.CLOUDHUB_REPLICAS }} \
        -Dch.vCores=${{ inputs.CLOUDHUB_REPLICA_SIZE }} \
        -Dap.businessGroup=${{ secrets.TITAN_BIZ_GROUP }} \
        -Dapi.layer=${{ inputs.APP_LAYER }} \
        -Dap.publicUrl=${{ inputs.CLOUDHUB_PUBLIC_URL }} \
        -Dap.generateDefaultPublicUrl=${{ inputs.GENERATE_PUBLIC_URL_FLAG }} \
        -Dap.clusteredFlag=${{ inputs.CLUSTER_ENABLED_FLAG }} \
        -Dlog.s3.frequency=${{ inputs.MULE_LOG_S3_FREQUENCY_MIN }} \
        -Dlog.s3.aws.region=${{ inputs.MULE_LOG_S3_AWS_REGION }} \
        -Dlog.s3.bucket=${{ inputs.MULE_LOG_S3_AWS_BUCKET }} \
        -Dlog.s3.compress=${{ inputs.MULE_LOG_S3_COMPRESS_FLAG }} \
        -Dlog.s3.storageClass=${{ inputs.MULE_LOG_S3_STORAGE_CLASS }} \
        -Dlog.s3.aws.accessKey=${{ secrets.MULE_AWS_S3_ACCESS_KEY }} \
        -Dlog.s3.aws.secureKey=${{ secrets.MULE_AWS_S3_SECRET_KEY }} \
